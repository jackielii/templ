package testdata

import "github.com/a-h/templ"
import "fmt"

// Global variable to test file scope
var globalVar = "global"

// Function to test file scope
func helperFunc() string {
	return "helper"
}

// Simple template with parameter
templ SimpleTemplate(name string) {
	<div>Hello { name }</div>
}

// Template with multiple parameters
templ WithMultipleParams(title string, count int) {
	<h1>{ title }</h1>
	<p>Count: { fmt.Sprint(count) }</p>
}

// Template with for loop
templ WithForLoop(items []string) {
	<ul>
		for i, item := range items {
			<li>{ fmt.Sprintf("%d: %s", i, item) }</li>
		}
	</ul>
}

// Template with if expression
templ WithIfExpression(show bool) {
	if show {
		<div>Visible</div>
	} else {
		<div>Hidden</div>
	}
}

// Template with local variables
templ WithLocalVars() {
	{{ localVar := "local value" }}
	<div>{ localVar }</div>
	
	for i := 0; i < 3; i++ {
		{{ innerVar := fmt.Sprintf("inner %d", i) }}
		<span>{ innerVar }</span>
	}
}

// Template with component elements
templ ParentComponent() {
	<div>
		<SimpleTemplate name="from parent" />
		<SimpleTemplate name={ helperFunc() } />
		<WithMultipleParams title="Test" count={ 42 } />
	</div>
}

// Template to test expression resolution
templ ExpressionTest(user User) {
	<div>
		// Direct field access
		<p>{ user.Name }</p>
		
		// Method call
		<p>{ user.GetEmail() }</p>
		
		// Function call
		<p>{ helperFunc() }</p>
		
		// Global variable
		<p>{ globalVar }</p>
	</div>
}

// Type definition for testing
type User struct {
	Name  string
	Email string
}

func (u User) GetEmail() string {
	return u.Email
}

// Template with nested scopes and local variables
templ NestedScopes(data []int) {
	{{ total := 0 }}
	
	for i, val := range data {
		{{ doubled := val * 2 }}
		if doubled > 10 {
			{{ msg := fmt.Sprintf("Large: %d", doubled) }}
			<p>{ msg }</p>
		} else {
			{{ msg := "Small value" }}
			<span>{ msg }</span>
		}
		{{ total = total + val }}
	}
	
	switch {
	case total < 10:
		{{ result := "Low total" }}
		<div>{ result }</div>
	case total < 100:
		{{ result := "Medium total" }}
		<div>{ result }</div>
	default:
		{{ result := fmt.Sprintf("High total: %d", total) }}
		<div>{ result }</div>
	}
}

// Template with type switch
templ TypeSwitchScopes(val interface{}) {
	switch v := val.(type) {
	case string:
		{{ length := len(v) }}
		<p>String of length { fmt.Sprint(length) }</p>
	case int:
		{{ doubled := v * 2 }}
		<p>Int doubled: { fmt.Sprint(doubled) }</p>
	case []string:
		{{ count := len(v) }}
		<p>Array with { fmt.Sprint(count) } items</p>
		for i, s := range v {
			<li>{ fmt.Sprintf("%d: %s", i, s) }</li>
		}
	default:
		{{ typeName := fmt.Sprintf("%T", v) }}
		<p>Unknown type: { typeName }</p>
	}
}

// Template with if conditions and short declarations
templ IfWithShortDecl(users []User) {
	if len(users) > 0 {
		{{ first := users[0] }}
		if name := first.Name; name != "" {
			{{ greeting := "Hello, " + name }}
			<h1>{ greeting }</h1>
		}
	}
}

// Template with comma-ok patterns
templ CommaOkPatterns(data map[string]int) {
	if val, ok := data["key"]; ok {
		<p>Found: { fmt.Sprint(val) }</p>
	}
	
	{{ var iface interface{} = "test" }}
	if str, ok := iface.(string); ok {
		<p>String value: { str }</p>
	}
}
